/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gdev.timetable.reports;

import com.gdev.timetable.db.DbManager;
import com.gdev.timetable.helper.MessageDisplay;
import com.gdev.timetable.model.ConfigDetail;
import com.gdev.timetable.model.SubjectAllocation;
import com.gdev.timetable.model.TimeTableDetail;
import com.gdev.timetable.utility.FileUtility;
import com.gdev.timetable.utility.Utility;
import com.lowagie.text.Document;
import com.lowagie.text.PageSize;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.io.File;
import java.io.FileOutputStream;
import java.util.Vector;
import java.util.stream.LongStream;
import java.util.stream.Stream;
import javax.swing.JFileChooser;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.gdev.timetable.reports//TimeTableDetailReport//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "TimeTableDetailReportTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.gdev.timetable.reports.TimeTableDetailReportTopComponent")
//@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_TimeTableDetailReportAction",
        preferredID = "TimeTableDetailReportTopComponent"
)
@Messages({
    "CTL_TimeTableDetailReportAction=TimeTable Detail",
    "CTL_TimeTableDetailReportTopComponent=TimeTable Detail",
    "HINT_TimeTableDetailReportTopComponent=This is a TimeTable Detail"
})
public final class TimeTableDetailReportTopComponent extends TopComponent {

    private ConfigDetail config;
    private Vector<TimeTableDetail> timeTable;
    private Vector<SubjectAllocation> allocation;
//    private 

    public TimeTableDetailReportTopComponent() {
        initComponents();
        setName(Bundle.CTL_TimeTableDetailReportTopComponent());
        setToolTipText(Bundle.HINT_TimeTableDetailReportTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtTimeTable = new javax.swing.JLabel();
        btnExport = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(txtTimeTable, org.openide.util.NbBundle.getMessage(TimeTableDetailReportTopComponent.class, "TimeTableDetailReportTopComponent.txtTimeTable.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(167, 167, 167)
                .addComponent(txtTimeTable)
                .addContainerGap(199, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(txtTimeTable)
                .addContainerGap(214, Short.MAX_VALUE))
        );

        org.openide.awt.Mnemonics.setLocalizedText(btnExport, org.openide.util.NbBundle.getMessage(TimeTableDetailReportTopComponent.class, "TimeTableDetailReportTopComponent.btnExport.text")); // NOI18N
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnExport)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(btnExport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle("Choose Backup Location");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        try{
        if (FileUtility.getDefault().getProperties("EXPORT_PATH") != null) {
            chooser.setCurrentDirectory(new File(FileUtility.getDefault().getProperties("EXPORT_PATH")));
        }
        }catch(Exception e){
            FileUtility.getDefault().saveProperties("EXPORT_PATH", null);
        }
        int i = chooser.showDialog(Utility.getDefault().getParent(), "Choose");
        if (i == JFileChooser.APPROVE_OPTION) {
            String path = chooser.getSelectedFile().getAbsolutePath();
            FileUtility.getDefault().saveProperties("EXPORT_PATH", path);
            Document document = new Document(PageSize.A4.rotate());
            try {
                String name = config.getDep_name() + "-" + config.getBranch_name() + "-" + config.getSem();
                PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(path + "/timeTable-" + name + ".pdf"));

                document.open();
                PdfContentByte cb = writer.getDirectContent();

                cb.saveState();
                Graphics2D g2 = cb.createGraphicsShapes(jPanel1.getWidth(), jPanel1.getHeight());

                Shape oldClip = g2.getClip();
                g2.clipRect(0, 0, jPanel1.getWidth(), jPanel1.getHeight());

                jPanel1.print(g2);
                g2.setClip(oldClip);

                g2.dispose();
                cb.restoreState();
//            com.lowagie.tools.Executable.printDocumentSilent(new FileOutputStream("timeTable.pdf"));

            } catch (Exception e) {
                System.err.println(e.getMessage());
            }
            document.close();
            MessageDisplay.showSuccessDialog(Utility.getDefault().getParent(), "Export Successfully", "Success");
        }
    }//GEN-LAST:event_btnExportActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExport;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel txtTimeTable;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {

    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    public void setData(long config) {
        this.config = (ConfigDetail) DbManager.getDefault().getConfig(0, 0, 0, config).elementAt(0);
        timeTable = DbManager.getDefault().getTimeTableDetail(config);
        allocation = DbManager.getDefault().getAllocSubject(this.config.getDep_id(), this.config.getBranch_id(), this.config.getSem());
        txtTimeTable.setText(createTimeTable());
//        jPanel1.pri

    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private String createTimeTable() {
        StringBuilder b = new StringBuilder();
        b.append("<html><b>");
        b.append(config.getDep_name());
        b.append(" - ");
        b.append(config.getBranch_name());
        b.append(" - ");
        b.append(config.getSem());
        b.append("</b><table border='1' style='width:400'><tr>");
        LongStream.range(0, config.getTotal_lec() + 1).forEach(l -> {
//            if
            b.append("<th>").append(l).append("</th>");
        });
        b.append("</tr>");
        LongStream.range(1, config.getTotal_day() + 1).forEach(d -> {
            b.append("<tr>");
            b.append("<td>").append(d).append("</td>");
            LongStream.range(1, config.getTotal_lec() + 1).forEach(l -> {
                b.append("<td>").append(getTimeTable(d, l)).append("</td>");
            });
            b.append("</tr>");

        });
        b.append("</table>");
        b.append("<br>");
        b.append(getDetail());
        return b.toString();
    }

    private String getTimeTable(long day, long lec) {
        StringBuilder b = new StringBuilder();

        TimeTableDetail tt = timeTable.stream().filter(t -> t.getDay() == day && t.getLec() == lec).
                flatMap(x -> Stream.of(x)).findFirst().orElse(null);
        SubjectAllocation alloc = getAllocation(tt.getSub_alloc_id());
        b.append(alloc.getAlias());
//        b.append("(");
//        b.append(alloc.getTech_name());
//        b.append(")");

        if (tt.getSub_alloc_id2() > 0) {
            alloc = getAllocation(tt.getSub_alloc_id2());
            b.append("<hr>");
            b.append(alloc.getAlias());
//            b.append("(");
//            b.append(alloc.getTech_name());
//            b.append(")");
        }

        return b.toString();
    }

    private SubjectAllocation getAllocation(long id) {
        return allocation.stream().filter(a -> a.getId() == id).flatMap(x -> Stream.of(x)).findFirst().orElse(null);
    }

    public String getDetail() {
        StringBuilder b = new StringBuilder();
        allocation.forEach(a -> {
            b.append(a.getAlias());
            b.append(" - ");
            b.append(a.getSubject_name());
            b.append(" &nbsp;(");
            b.append(a.getTech_name());
            b.append(")");
            b.append("<br>");
        });

        return b.toString();
    }

}
