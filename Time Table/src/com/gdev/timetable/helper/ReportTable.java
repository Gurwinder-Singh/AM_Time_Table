package com.gdev.timetable.helper;

import com.gdev.timetable.utility.Utility;
import com.gdev.timetable.interfaces.ReportTableImplementPanelClass;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Vector;
import java.util.regex.PatternSyntaxException;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Gurwinder Singh
 */
public class ReportTable extends javax.swing.JPanel {

    private Vector reportListeners = new Vector<>();
    private ReportTableImplementPanelClass repListner = null;
    private TableModel model;
    private TableRowSorter<TableModel> sorter;
    private JPopupMenu popupMenu = new JPopupMenu();

    /**
     * Creates new form ReportTable
     */
    public ReportTable() {
        initComponents();
        btnRefresh.setToolTipText("Refresh Table");
        value.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                update();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                update();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                update();
            }
        });
        PopupListener lis = new PopupListener();
        table.addMouseListener(lis);
    }

    private void update() {
        sorter = getfilterSorter();
    }

    public void setTitle(String title) {
        setBorder(Utility.getBorder(title, this));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        value = new javax.swing.JTextField();
        btnRefresh = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(ReportTable.class, "ReportTable.border.title_1"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ReportTable.class, "ReportTable.jLabel1.text_1")); // NOI18N

        value.setText(org.openide.util.NbBundle.getMessage(ReportTable.class, "ReportTable.value.text_1")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnRefresh, org.openide.util.NbBundle.getMessage(ReportTable.class, "ReportTable.btnRefresh.text_1")); // NOI18N
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnAdd, org.openide.util.NbBundle.getMessage(ReportTable.class, "ReportTable.btnAdd.text_1")); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(value)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAdd)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh)
                    .addComponent(btnAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        getreportListner().refreshTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        getreportListner().getAddBtnAction();
    }//GEN-LAST:event_btnAddActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // TODO add your handling code here:
        getPopupMenu();
        getreportListner().tableMouseClickedAction(evt);
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            int nCol = this.getTable().convertColumnIndexToModel(this.getTable().columnAtPoint(evt.getPoint()));
            if (nCol == 0) {
                MessageDisplay.showErrorDialog(null, "Error in line ");
            }
        }
    }//GEN-LAST:event_tableMouseClicked
    public void addReportListener(ReportTableImplementPanelClass listener) {
        this.reportListeners.add(listener);
    }

    public void removeReportListener(ReportTableImplementPanelClass listener) {
        this.reportListeners.remove(listener);
    }

    public JTable getTable() {
        return this.table;
    }

    public void setTable(JTable table) {
        this.table = table;
    }

    public TableRowSorter<TableModel> getSorter() {
        return sorter;
    }

    public void setSorter(TableRowSorter<TableModel> sorter) {
        this.sorter = sorter;
    }

    private void generatePopUpMenus() {
        if (popupMenu != null) {
            popupMenu.removeAll();
        }

    }

    public JPopupMenu getPopupMenu() {
        if (popupMenu == null || popupMenu.getComponents().length == 0) {
            generatePopUpMenus();
        }
        return popupMenu;
    }

    public void clearPopupMenu() {
        this.popupMenu.removeAll();
        generatePopUpMenus();
    }

    public void tableChange() {
        this.model.TableChanged();
    }

    public void tableCellUpdated(int row, int col) {
        model.fireTableCellUpdated(row, col);
    }

    public ReportTableImplementPanelClass getreportListner() {
        if (this.repListner == null) {
            for (int i = 0; i < reportListeners.size(); i++) {
                this.repListner = (ReportTableImplementPanelClass) reportListeners.elementAt(i);
                if (repListner != null) {
                    return repListner;
                }
            }
        }
        return repListner;
    }

    class PopupListener extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent e) {

            showPopup(e);
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            try {
                if (!(table.getSelectedRowCount() > 1)) {
                    table.clearSelection();
                    table.addRowSelectionInterval(table.rowAtPoint(e.getPoint()), table.rowAtPoint(e.getPoint()));
                }
                showPopup(e);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

        private void showPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                popupMenu.show(e.getComponent(), e.getX(), e.getY());
            }
        }
    }

    private class TableModel extends AbstractTableModel {

        private String[] columns;
        private int visibleColumnCount;
        private Vector dataVector;

        @Override
        public boolean isCellEditable(int nRow, int nCol) {
            return getreportListner().isCellEditable(nRow, nCol);
        }

        public void clear() {
            if (dataVector != null) {
                dataVector.clear();
            }
            table.clearSelection();
            sorter.setRowFilter(null);
        }

        public void setColumns(String[] colms) {
            this.columns = colms;

        }

        public void setVisibleColumnCount(int vcc) {
            this.visibleColumnCount = vcc;
        }

        @Override
        public int getRowCount() {
            return dataVector == null ? 0 : dataVector.size();

        }

        @Override
        public Class getColumnClass(int c) {
            return getreportListner().getcolumnClass(c);

        }

        @Override
        public String getColumnName(int col) {
            if (col < columns.length) {
                return columns[col];
            } else {
                return null;
            }
        }

        @Override
        public int getColumnCount() {
            if (visibleColumnCount > -1) {
                return visibleColumnCount;
            } else {
                return columns.length;
            }

        }

        public void addRow(int i, Object row) {
            if (dataVector == null) {
                dataVector = new Vector();
            }
            dataVector.add(i, row);
        }

        public void addRow(Object row) {
            if (dataVector == null) {
                dataVector = new Vector();
            }
            dataVector.add(row);
        }

        @Override
        public Object getValueAt(int nrow, int ncol) {
            if (getreportListner().getcolumnClass(ncol) == Integer.class && ncol == 0) {
                return getDisplayRowNumberForTable(nrow) + 1;
            }
            return getreportListner().getValueAt(nrow, ncol);
        }

        public Object getRow(int rowNum) {
            if (dataVector == null || rowNum > dataVector.size()) {
                return null;
            } else {
                return dataVector.elementAt(rowNum);
            }
        }

        public void TableChanged() {
            fireTableChanged(null);
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            getreportListner().setValueAt(aValue, rowIndex, columnIndex);
            TableChanged();
        }
    }

    public int getDisplayRowNumberForTable(int r) {
        return table.convertRowIndexToView(r);
    }

    public Vector getModelData() {
        return getSortedDataVector(this.model.dataVector);
    }

    private Vector getSortedDataVector(Vector v) {
        Vector data = new Vector();
        for (int i = 0; i < sorter.getViewRowCount(); i++) {
            data.add(v.elementAt(sorter.convertRowIndexToModel(i)));
        }
        return data;
    }

    public Vector getSelectedModelData() {
        if (table.getSelectedRowCount() > 0) {
            Vector temp = new Vector();
            int[] idx = table.getSelectedRows();
            Vector v = getModelData();
            for (int j = 0; j < idx.length; j++) {
                temp.add(v.elementAt(idx[j]));
            }
            return temp;
        } else {
            int result = MessageDisplay.showConfirmDialog(this.getParent(),
                    "No Row Selected. \n Do you want to continue with all rows.", "Cancel");
            if (result == MessageDisplay.YES_OPTION) {
                return getModelData();
            } else {
                return new Vector();
            }
        }
    }

    public int getSelectedRow() {
        if (table.getSelectedRowCount() > 0) {
            return table.convertRowIndexToModel(table.getSelectedRow());
        }
        return -1;
    }

    private TableRowSorter<TableModel> filterNormal(String val, TableRowSorter<TableModel> sorter) {

        RowFilter<TableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter("(?i)" + val);
        } catch (PatternSyntaxException pse) {
            pse.printStackTrace();
            return sorter;
        }
        ArrayList<RowFilter<TableModel, Object>> filters = new ArrayList<RowFilter<TableModel, Object>>();
        filters.add(rf);
        RowFilter andFilter = RowFilter.andFilter(filters);
        sorter.setRowFilter(andFilter);
        return sorter;
    }

    public TableRowSorter<TableModel> getfilterSorter() {
        if (sorter == null) {
            sorter = new TableRowSorter<>(model);
        }
        sorter = filterNormal(value.getText(), this.sorter);
        return sorter;
    }

    public void setTableModel(Vector data) {
        if (model == null) {
            model = new TableModel();
        }
        table.setRowHeight(20);
        this.model.dataVector = data;
        model.setColumns(getreportListner().getColumnNames());
        model.setVisibleColumnCount(getreportListner().getVisibleColumnCount());
        table.setModel(model);
        sorter = new TableRowSorter<>(model);
        sorter.setMaxSortKeys(3);
        table.setRowSorter(sorter);
        model.TableChanged();
        this.value.setText("");
        setDefaultCellRenderer();
        this.btnRefresh.setEnabled(true);
        getreportListner().setTableAttributes();

    }

    private void setDefaultCellRenderer() {
        table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                if (!Utility.getDefault().isDarkTheme()) {
                    if (isSelected) {
                        c.setBackground(table.getSelectionBackground());
                        c.setForeground(Color.WHITE);
                    } else {
                        c.setBackground(row % 2 == 0 ? Utility.getDefault().getRowBgColor() : Color.WHITE);
                        c.setForeground(Color.BLACK);
                    }
                }
                return this;
            }
        });

        table.setDefaultRenderer(Number.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                if (!Utility.getDefault().isDarkTheme()) {
                    if (isSelected) {
                        c.setBackground(table.getSelectionBackground());
                        c.setForeground(Color.WHITE);
                    } else {
                        c.setBackground(row % 2 == 0 ? Utility.getDefault().getRowBgColor() : Color.WHITE);
                        c.setForeground(Color.BLACK);
                    }
                }
                return this;
            }
        });
        SerialNumberClassCellRenderer cellRenderer = new SerialNumberClassCellRenderer();
        if (this.model.dataVector != null && !this.model.dataVector.isEmpty()) {
            for (int row = 0; row < this.model.dataVector.size(); row++) {
                try {
                    TableColumn column = table.getColumnModel().getColumn(0);
                    Class columnClass = table.getColumnClass(0);
                    if (column != null && columnClass == Integer.class) {
                        column.setCellRenderer(cellRenderer);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void setColumnWidth(int col, int min, int max) {
        TableColumn tcol = this.table.getColumnModel().getColumn(col);
        if (max > 0) {
            tcol.setMaxWidth(max);
        }
        if (min > 0) {
            tcol.setMinWidth(min);
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JTextField value;
    // End of variables declaration//GEN-END:variables
}
