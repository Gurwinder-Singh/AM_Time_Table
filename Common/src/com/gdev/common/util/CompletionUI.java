
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CompletionUI.java
 *
 * Created on May 31, 2013, 6:50:40 PM
 */
package com.gdev.common.util;

//import com.as.interfaces.UiFiles.IconFactoryClass;
import com.gdev.common.interfaces.CompletionUiListner;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Properties;
import java.util.Vector;
import java.util.regex.PatternSyntaxException;
import javax.swing.InputVerifier;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JWindow;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.ScrollPaneConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;
import com.gdev.common.other.MessageDisplay;
import com.gdev.common.other.Utility;
import org.openide.windows.WindowManager;

/**
 *
 * @author Gaurav
 */
public class CompletionUI extends javax.swing.JPanel implements ActionListener,
        Serializable {

    CompletionWindow choser = null;
    private Vector<ActionListener> listeners = new Vector<ActionListener>();
    public static Frame defaultParent = null;
    private boolean firingActionEvent = false;
    protected String ActionCommand = "UIChanged";
    private int selectedIndex;
    private CompletionUiListner dataListner = null;
    private boolean fireEvent = false;
    private boolean includeAll = false;
    private boolean mandatory = false;
    private int addType = 0;
    private JPopupMenu popupMenu = new JPopupMenu();
    private JMenuItem ClearItem = null;

    /**
     * Creates new form CompletionUI
     */
    public CompletionUI() {
        initComponents();
        generatePopup();
        addButton.setVisible(addType > 0);
        InputField.setText("");
        this.setEnable(false);

        choser = new CompletionWindow(WindowManager.getDefault().getMainWindow());
        InputField.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                choser.filter();
                validateInputField();

            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                choser.filter();
                validateInputField();

            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                choser.filter();
                validateInputField();

            }
        });
    }

    public CompletionUI(Window parent, ArrayList data, CompletionUiListner m, boolean key) {
        try {
            setCompletionUiDataListner(m, null);
            initComponents();
            generatePopup();
            addButton.setVisible(addType > 0);

            lookUpButton.setFocusable(false);
            addButton.setFocusable(false);
            choser = new CompletionWindow(parent);
            if (data != null) {
                setDataList(data);
            } else {
                InputField.setText("");
                this.setEnable(false);
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public CompletionUI(Window parent, ArrayList data, Comparator comprtr) {
        this(parent, data, null, false);
    }

    public CompletionUI(Window parent, ArrayList data) {

        this(parent, data, null, false);

    }

    public CompletionUI(Window parent, ArrayList data, boolean t) {
        this(parent, data, null, t);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InputField = new javax.swing.JTextField();
        lookUpButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();

        setOpaque(false);

        final ValueVerifier df = new ValueVerifier();
        InputField.setBackground(new java.awt.Color(255, 255, 204));
        InputField.setText(org.openide.util.NbBundle.getMessage(CompletionUI.class, "CompletionUI.InputField.text_1")); // NOI18N
        InputField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        InputField.setInputVerifier(df);
        InputField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputFieldActionPerformed(evt);
            }
        });
        InputField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                InputFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                InputFieldFocusLost(evt);
            }
        });
        InputField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                InputFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                InputFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                InputFieldKeyTyped(evt);
            }
        });

        lookUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mac/common/icons/arrow_down.png"))); // NOI18N
        lookUpButton.setText(org.openide.util.NbBundle.getMessage(CompletionUI.class, "CompletionUI.lookUpButton.text_1")); // NOI18N
        lookUpButton.setLabel(org.openide.util.NbBundle.getMessage(CompletionUI.class, "CompletionUI.lookUpButton.label")); // NOI18N
        lookUpButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        lookUpButton.setContentAreaFilled(false);
        lookUpButton.setFocusable(false);
        lookUpButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                addButtonStateChanged(evt);
            }
        });
        lookUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookUpButtonActionPerformed(evt);
            }
        });

        addButton.setText(org.openide.util.NbBundle.getMessage(CompletionUI.class, "CompletionUI.addButton.text_1")); // NOI18N
        addButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        addButton.setContentAreaFilled(false);
        addButton.setFocusable(false);
        addButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                addButtonStateChanged(evt);
            }
        });
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(InputField, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(lookUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(InputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lookUpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addButton, lookUpButton});

    }// </editor-fold>//GEN-END:initComponents

    private void addButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_addButtonStateChanged
// TODO add your handling code here:
        btnStateChanged(evt);
    }//GEN-LAST:event_addButtonStateChanged

    private void lookUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookUpButtonActionPerformed
// TODO add your handling code here:
        InputField.setText("");
        showChoserWindow();
        InputField.requestFocus();
    }//GEN-LAST:event_lookUpButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
// TODO add your handling code here:
//        MasterCreationFactory.getDefault().createMaster(addType, InputField.getText());
        if (dataListner != null) {
            dataListner.performAddAction();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void InputFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InputFieldActionPerformed
// TODO add your handling code here:
        choser.tableAction();
    }//GEN-LAST:event_InputFieldActionPerformed

    private void InputFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_InputFieldFocusLost
// TODO add your handling code here:
//        
        if (!mandatory) {
            InputField.setBackground(Utility.getColor("FFFFCC"));
        } else {
            Utility.fieldFocusLost(InputField, mandatory);
        }
        if (fireEvent) {
            if (isInFocus(evt) && !mandatory) {
                choser.tableAction();
            }
        } else {
            closeWindowIfNoFocus(evt);
        }
        if (choser.isVisible()) {
            closeWindowIfNoFocus(evt);
        }
        fireEvent = false;

    }//GEN-LAST:event_InputFieldFocusLost

    private void InputFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_InputFieldFocusGained
// TODO add your handling code here:
        Utility.fieldFocusGained(InputField, mandatory);

    }//GEN-LAST:event_InputFieldFocusGained

    private void InputFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputFieldKeyTyped
// TODO add your handling code here:
        if (evt.getKeyChar() != KeyEvent.VK_TAB
                && evt.getKeyChar() != KeyEvent.VK_ENTER
                && evt.getModifiers() != KeyEvent.ALT_MASK
                && evt.getModifiers() != KeyEvent.CTRL_MASK
                && evt.getKeyCode() != KeyEvent.VK_DOWN
                && evt.getKeyCode() != KeyEvent.VK_UP) {
            fireEvent = true;
        }
    }//GEN-LAST:event_InputFieldKeyTyped

    private void InputFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputFieldKeyPressed
// TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_DOWN
                || evt.getKeyCode() == KeyEvent.VK_UP) {

            selectedIndex = getSelectedIndex();
            System.out.println(selectedIndex);
            if (fireEvent) {
                fireEvent = false;
            } else {
                InputField.setText("");
            }


            showChoserWindow();
            choser.table.requestFocus();
            choser.table.changeSelection(selectedIndex > -1 ? choser.table.convertRowIndexToView(selectedIndex) : 0, 0, false, false);

        } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            choser.setVisible(false);
        }
    }//GEN-LAST:event_InputFieldKeyPressed

    private void InputFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputFieldKeyReleased
// TODO add your handling code here:
        if (!choser.isVisible() && !(evt.getKeyCode() == KeyEvent.VK_ENTER)
                && !(evt.getKeyCode() == KeyEvent.VK_ESCAPE)
                && !(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)
                && !(evt.getKeyCode() == KeyEvent.VK_DELETE)
                && !(evt.getKeyCode() == KeyEvent.VK_HOME)
                && !(evt.getKeyCode() == KeyEvent.VK_SHIFT)
                && !(evt.getKeyCode() == KeyEvent.VK_ALT)
                && !(evt.getKeyCode() == KeyEvent.VK_CONTROL)
                && !(evt.getKeyCode() == KeyEvent.VK_F1)
                && !(evt.getKeyCode() == KeyEvent.VK_CAPS_LOCK)
                && !(evt.getKeyCode() == KeyEvent.VK_TAB)) {
            showChoserWindow();

        }
    }//GEN-LAST:event_InputFieldKeyReleased
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField InputField;
    private javax.swing.JButton addButton;
    public javax.swing.JButton lookUpButton;
    // End of variables declaration//GEN-END:variables

    public CompletionUI(CompletionUiListner listn) {
        this(defaultParent, listn, false);
    }

    public CompletionUI(CompletionUiListner listn, boolean t) {
        this(defaultParent, listn, t);
    }

    public CompletionUI(Window parent, CompletionUiListner listn, boolean t) {
        this(parent, null, listn, t);
    }

//       <<<<<<<<<<<<<<<<<<<<<<<<<<<< Setting of Data in CompletionUI   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    public void setDataListener(CompletionUiListner DataList) {
        setDataListener(false, DataList, false);
    }

    public void setDataListener(boolean InAll, CompletionUiListner DataList) {
        setDataListener(InAll, DataList, false);
    }

    public void setDataListener(CompletionUiListner DataList, boolean t) {
        setDataListener(false, DataList, false);
    }

    public void showLookupButton(boolean show) {
        this.lookUpButton.setVisible(show);
    }

    public void setDataListener(boolean InAll, CompletionUiListner DataList, boolean t) {
        this.includeAll = InAll;
        setValue("");
        this.dataListner = DataList;
        if (DataList == null) {
            this.setEnable(false);
        } else {
            choser.setModel();
            if (t && choser.getRowCount() == 1) {
                this.setEnable(false);
            } else if (choser.getRowCount() > 0) {
                this.setEnable(true);
            } else {
                this.setEnable(false);
            }
        }
    }

    public CompletionUiListner getDataListener() {
        return dataListner;
    }

    /**
     * This method is used to set the value in datalist.
     */
    public void setDataList(ArrayList DataList) {
        setDataList(DataList, false);
    }

    /**
     * This method is used to set the value in datalist for type style combos.
     */
    public void setDataList(ArrayList DataList, boolean t) {

//            clear();

        selectedIndex = -1;
        if (DataList == null) {
//                dataListner=null;
            InputField.setText("");
            this.setEnable(false);
            return;
        }
        setCompletionUiDataListner(null, null);
        choser.setData(getVectorFromArrayList(DataList));

        if (t && choser.getRowCount() == 1) {
            this.setEnable(false);
        } else if (choser.getRowCount() > 0) {
            this.setEnable(true);
        } else {
            this.setEnable(false);
        }

    }

    public void setDataInfo(Vector Data) {
        setDataInfo(Data, false);
    }

    public void setDataInfo(Vector Data, boolean t) {

        selectedIndex = -1;
        if (Data == null) {
            InputField.setText("");
            this.setEnable(false);
            return;
        }
        setCompletionUiDataListner(null, null);
        choser.setData(Data);

        if (t && choser.getRowCount() == 1) {
            this.setEnable(false);
        } else if (choser.getRowCount() > 0) {
            this.setEnable(true);
        } else {
            this.setEnable(false);
        }

    }

    private Vector getVectorFromArrayList(ArrayList list) {
        Vector v = new Vector();
        if (list != null) {
            for (Iterator it = list.iterator(); it.hasNext();) {
                v.add(it.next());
            }
        }
        return v;
    }

    public void setValueAsData(String value) {
        if (value != null) {
            ArrayList<String> list = new ArrayList<String>();
            list.add(value);
            setDataList(list, (value != null && value.trim().equals("General")));
            setValue(value);
        }
    }

    public void setToolTip(String s) {
        InputField.setToolTipText(s);
    }

//        <<<<<<<<<<<<<<<<<<<<<<< Other Methods of CompletionUI >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    private void validateInputField() {
        // if the value exist in the list then set color black otherwise red
        if (validateValue()) {
            InputField.setForeground(Color.BLACK);
        } else {
            InputField.setForeground(Color.RED);
        }

    }

    /**
     * Checks if the value in the
     * <code>InputField</code> exists in the list or not.
     *
     * @return
     * <code>true</code> if the value exists in the list.
     */
    public boolean validateValue() {
        if (getValue().length() > 0) {
            return choser.getIndex(dataListner.getSelectedObject(getValue().trim(), isIncludeAll())) > -1;
        }
        return true;
    }

    /**
     * Gets the value of the for this completion ui.
     *
     * @return
     */
    public String getValue() {
        return InputField.getText().trim();
    }

    public Object getSelectedValue() {
        return choser.getSelectedValueForInputTextField();
    }

    public Object getSelectedObject() {
        return dataListner.getSelectedObject(getValue().trim(), isIncludeAll());
    }

    public int getDataListSize() {
        return choser.getRowCount();
    }

    /**
     * Close Completion UI .
     *
     */
    public void closeUI() {
        // remove the completion window
        validateValue();
        choser.setVisible(false);
    }

    /**
     * Sets the value of this completion ui.
     *
     * @param val
     */
    public void setValue(String val) {
        if (val != null && !val.isEmpty()) {
            if (dataListner != null && choser != null) {
                InputField.setText(val);
                if (validateValue()) {
                    selectedIndex = choser.getIndex(dataListner.getSelectedObject(val.trim(), isIncludeAll()));
                } else {
                    selectedIndex = -1;
                }
            }
        } else {
            InputField.setText("");
            selectedIndex = -1;
        }
    }

    public void updateDataVector(Vector data) {
        if (getDataListener() != null) {
            getDataListener().updateDataVector(data, this, isIncludeAll());
            choser.setModel();
            if (choser.getRowCount() > 0) {
                this.setEnable(true);
            } else {
                this.setEnable(false);
            }
        }
    }

    /**
     * @return the includeAll
     */
    public boolean isIncludeAll() {
        return includeAll;
    }

    /**
     * @param includeAll the includeAll to set
     */
    public void setIncludeAll(boolean includeAll) {
        this.includeAll = includeAll;
    }

    private void generatePopup() {
        ClearItem = new JMenuItem("Clear");
        ClearItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                clearActionPerformed(e);
            }
        });
        popupMenu.add(ClearItem);

        lookUpButton.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                showPopup(e);
            }

            @Override
            public void mousePressed(MouseEvent e) {
                showPopup(e);
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                showPopup(e);
            }

            private void showPopup(MouseEvent e) {
                if (!mandatory) {
                    if (e.isPopupTrigger() || e.getButton() == JButton.RIGHT) {
                        popupMenu.show(e.getComponent(), e.getX(), e.getY());
                    }
                }
            }
        });

    }

    public void setEnabledClear(boolean bool) {
        ClearItem.setEnabled(bool);
    }

    private void clearActionPerformed(ActionEvent e) {
        if (!mandatory) {
            closeUI();
//            setSelectedIndex(-1);
            clear();
        }
    }

    /**
     * This class verifies the input on the
     * <code>InputField</code>. It verifies, whether the value in the
     * <code>InputField</code> exists in the
     * <code>dataList</code>
     *
     * @author Saurabh
     *
     */
    private class ValueVerifier extends InputVerifier {

        @Override
        public boolean verify(JComponent input) {
            if (getValue().trim().length() > 0) {
                return choser.getIndex(dataListner.getSelectedObject(getValue().trim(), isIncludeAll())) > -1;
            }

            return true;
        }
    }

    /**
     * Add the
     * <code>ActionListener</code> to this control.
     *
     * @param listener
     */
    public void addActionListener(ActionListener listener) {
        listeners.add(listener);
    }

    /**
     * Remove the
     * <code>ActionListener</code> from this control.
     *
     * @param listener
     */
    public void removeActionListener(ActionListener listener) {
        listeners.remove(listener);
    }

    /**
     * Selects the text in the
     * <code>InputField</code>
     *
     */
    public void selectAll() {
        InputField.selectAll();
    }

    /**
     * Sets the focus to the
     * <code>InputField</code>
     */
    @Override
    public void requestFocus() {
        InputField.requestFocus();
    }

    /**
     * Sets the
     * <code>InputField</code>'s editable property
     *
     * @param b
     */
    public void setEnable(boolean b) {
        if (b == false) {
            InputField.setEnabled(false);
            InputField.setOpaque(false);
            lookUpButton.setEnabled(false);
        } else {
            InputField.setEnabled(true);
            InputField.setOpaque(true);
            lookUpButton.setEnabled(true);
        }
    }

    public int getSelectedIndex() {
        if (getValue().length() > 0) {
            return choser.getIndex(dataListner.getSelectedObject(getValue().trim(), isIncludeAll()));
        }
        return -1;
    }

    public void setSelectedIndex(int index) {
        selectedIndex = index;
        setValue(choser.getSelectedValueForInputTextField());

    }

//        <<<<<<<<<<<<<<<<<<<<<<<<<<<  Setting up other Components  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    private void showChoserWindow() {
        InputField.setHorizontalAlignment(JTextField.LEFT);
        Point p = InputField.getLocationOnScreen();
        // get local graphics environment
        GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment();
        // get maximum window bounds
        java.awt.Rectangle dim = graphicsEnvironment.getMaximumWindowBounds();

        // Width difference between screen width and X value of completion
        int widthDiff = dim.width - p.x;
        if (widthDiff < 315) {
            // set right X for completion UI
            p.x = dim.width - 315;
        }
        // height difference between screen Height and Y value of completion
        int diff = dim.height - p.y;
        if (diff < 190) {
            // set the left top Y for the completion window.
            p.y -= 190;
        } else {
            // set the left top Y for the completion window.
            p.y += lookUpButton.getSize().height + 2;
        }
        // set the location of the completion window
        choser.setLocation(p);
        choser.setFocusableWindowState(false);
        choser.setVisible(true);
        choser.setFocusableWindowState(true);
//                choser.setModel();
        choser.filter();
    }

    private class CompletionWindow extends JWindow {

        private JScrollPane pane;
        private JTable table;
        private ColumnHeaderAdapter columnHeaderAdapter = null;
        private TableRowSorter<TableModel> sorter;
        private TableModel model = new TableModel();

        public CompletionWindow(Window owner) {
            super(owner);


            initializeUI();
            initializeListers();
            Dimension d = this.getPreferredSize();
//            d.width = 300;
            d.width = 300; // ReadPropertiesFile.getDefault().getCompletionUIPaneWidth(300);
            this.setPreferredSize(d);
            pack();
        }

        public String getSelectedValueForInputTextField() {
            return dataListner.getValueAt(selectedIndex, 0, isIncludeAll()).toString();
        }

        private void initializeUI() {

            table = new JTable();
            pane = new JScrollPane();
            columnHeaderAdapter = new ColumnHeaderAdapter();
            table.addMouseListener(new java.awt.event.MouseAdapter() {

                @Override
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() == 2) {
                        InputField.setText("");
                        tableAction();
                    }
                }

                @Override
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                }
            });

            table.getTableHeader().addMouseMotionListener(columnHeaderAdapter);

            table.addFocusListener(new FocusAdapter() {

                @Override
                public void focusLost(FocusEvent e) {
                    setVisible(false);
                    InputField.requestFocus();

                }

                @Override
                public void focusGained(FocusEvent e) {
                }
            });

            table.addKeyListener(new KeyAdapter() {

                @Override
                public void keyTyped(java.awt.event.KeyEvent evt) {
                    if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
//                            this is done as on enter event the next row is selected
//                                int row = table.getSelectedRow();
                        if (getModelData().size() > 0) {
                            if (table.getSelectedRow() < 1) {
//                                this is done because at last row the enter event goes out of focus 
//                                and selected row becomes 0 
                                InputField.setText(dataListner.getValueAt(table.convertRowIndexToModel(
                                        getModelData().size() - 1), 0, isIncludeAll()).toString());
                            } else {
                                InputField.setText(dataListner.getValueAt((table.convertRowIndexToModel(
                                        table.getSelectedRow() - 1)), 0, isIncludeAll()).toString().trim());

                            }
                            fireUIActionEvent();
                        } else {
                            MessageDisplay.showErrorDialog(pane, "No Data to select.");
                        }
                    } else if (evt.getKeyChar() == KeyEvent.VK_ESCAPE //                                    || evt.getKeyChar() == KeyEvent.VK_BACK_SPACE
                            ) {
                        setVisible(false);
                        InputField.requestFocus();
                        fireEvent = true;
                    }
                }
            });
            pane.setViewportView(table);
            Dimension d = pane.getPreferredSize();
            d.height = (10 * table.getRowHeight()) + 23;
//        check here   // d.width = //ReadPropertiesFile.getDefault().getCompletionUIPaneWidth(d.width);
            table.setBackground(Utility.getColor("FFFFEE"));
            table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            pane.setPreferredSize(d);
            pane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            table.setShowHorizontalLines(false);
//            table.setShowVerticalLines(false);   
            this.add(pane);
        }

        protected void setViewPosition() {
            pane.getViewport().setViewPosition(new Point(0, 0));
        }

        private void initializeListers() {

            InputField.getDocument().addDocumentListener(new DocumentListener() {

                @Override
                public void insertUpdate(DocumentEvent e) {
                    filter();
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                    filter();
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                    filter();
                }
            });

        }

        private void tableAction() {
            try {
                if (table.getSelectedRow() > -1) {
                    selectedIndex = table.convertRowIndexToModel(table.getSelectedRow());
                    InputField.setText(dataListner.getValueAt(selectedIndex, 0, isIncludeAll()).toString());
                    fireUIActionEvent();
                } else {
//                   closeUI();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

        private void filter() {
            try {

//                sorter.setRowFilter(RowFilter.regexFilter(
//                        (ClientController.getDefault().isColaps() ? "(?i)" : "(?i)^")
//                        + InputField.getText().trim()));
                 sorter.setRowFilter(RowFilter.regexFilter(
                        (false ? "(?i)" : "(?i)^")
                        + InputField.getText().trim()));
                if (!InputField.getText().isEmpty() && sorter.getViewRowCount() > 0) {
                    table.setRowSelectionInterval(0, 0);
                }

                if (table.getColumnCount() > 0 && !getDataVector().isEmpty()) {
                    table.getColumnModel().getColumn(0).setHeaderValue(dataListner.getColumnName()[0]
                            + " { " + sorter.getViewRowCount() + " } ");
                    table.updateUI();
                }
            } catch (PatternSyntaxException pse) {
                pse.printStackTrace();
            }
        }

        public Vector getModelData() {
            Vector vecData = new Vector();
            if (dataListner.getDataVector(isIncludeAll()) != null && dataListner.getDataVector(isIncludeAll()).size() > 0) {
                for (int i = 0; sorter.getViewRowCount() > i; i++) {
                    vecData.add(dataListner.getDataVector(isIncludeAll()).elementAt(sorter.convertRowIndexToModel(i)));
                }
            }
            return vecData;
        }

        @Override
        public void requestFocus() {
            this.setVisible(true);
            choser.table.changeSelection(selectedIndex > -1 ? choser.table.convertRowIndexToView(selectedIndex) : 0, 0, false, false);

        }

        private void setData(Vector v) {
            dataListner.setDataVector(v);
            setModel();
        }

        private void setModel() {
            table.setModel(model);
            if (dataListner != null) {
                table.setFillsViewportHeight(true);
                if (table.getColumnCount() > 0 && !getDataVector().isEmpty()) {
                    table.getColumnModel().getColumn(0).setHeaderValue(
                            table.getColumnModel().getColumn(0).getHeaderValue() + " { " + getDataVector().size() + " } ");
                }
                table.setModel(model);
                sorter = new TableRowSorter<TableModel>(model);
                table.setRowSorter(sorter);
                model.fireTableChanged(null);

//            InputField.setText("");
                dataListner.setAttributes(table);

                if (columnHeaderAdapter.getProperties(dataListner.getParentName()) == null) {
                    dataListner.addColumnSettings(table, isIncludeAll());
//                pane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
                } else {
                    //move columns 
                    columnHeaderAdapter.getColumnNamesFromBundle(dataListner.getParentName());
                    //set width
                    columnHeaderAdapter.getColumnWidthFromBundle(dataListner.getParentName());
//                pane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
                }
            }
        }

        public JTable getTable() {
            return table;
        }

        public int getRowCount() {
            return model.getRowCount();
        }

        public Vector getDataVector() {
            return dataListner.getDataVector(isIncludeAll());
        }

        public Object getRow(int rowNum) {
            if (dataListner.getDataVector(isIncludeAll()) != null && rowNum < dataListner.getDataVector(isIncludeAll()).size()) {
                return dataListner.getDataVector(isIncludeAll()).elementAt(rowNum);
            } else {
                return null;
            }
        }

        public int getIndex(Object ob) {
            return dataListner.getDataVector(isIncludeAll()) != null ? dataListner.getDataVector(isIncludeAll()).indexOf(ob) : -1;
        }
    }

    public class TableModel extends AbstractTableModel {

        @Override
        public int getRowCount() {
            return dataListner.getDataVector(isIncludeAll()) == null ? 0 : dataListner.getDataVector(isIncludeAll()).size();
        }

        @Override
        public int getColumnCount() {
            return dataListner.getVisibleColumns();
        }

        @Override
        public String getColumnName(int col) {
            return dataListner.getColumnName()[col];

        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return dataListner.getValueAt(rowIndex, columnIndex, isIncludeAll());
        }

        @Override
        public Class getColumnClass(int c) {
            return dataListner.getColumnClass(c);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String oldCommand = getActionCommand();
        setActionCommand("UIEdited");
        fireUIActionEvent();
        setActionCommand(oldCommand);
    }

    public void clear() {
        InputField.setText("");
        selectedIndex = -1;

    }

    protected void fireUIActionEvent() {
        choser.setVisible(false);
//            InputField.requestFocus();
        if (!firingActionEvent && listeners.size() > 0) {
            // Set flag to ensure that an infinite loop is not created
            firingActionEvent = true;
            ActionEvent u = null;
            // Guaranteed to return a non-null array
            long mostRecentEventTime = EventQueue.getMostRecentEventTime();
            int modifiers = 0;
            // AWTEvent currentEvent = EventQueue.getCurrentEvent();
            try {
                ActionListener lis = (listeners).elementAt(0);
                // Lazily create the event:
                if (u == null) {
                    u = new ActionEvent(this, ActionEvent.ACTION_PERFORMED,
                            getActionCommand(), mostRecentEventTime, modifiers);
                }
                ((ActionListener) lis).actionPerformed(u);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(defaultParent,
                        "Invalid Action Occurred.");
                e.printStackTrace();
                System.out.println(e);
                firingActionEvent = false;
                fireEvent = false;
                InputField.requestFocus();
            }
            firingActionEvent = false;
            fireEvent = false;
        }

    }

    private void closeWindowIfNoFocus(FocusEvent event) {
        if (isInFocus(event)) {
            choser.setVisible(false);
        }

    }

    private boolean isInFocus(FocusEvent event) {
        Component destinationComp = event.getOppositeComponent();
        return (destinationComp != choser && destinationComp != choser.table
                && destinationComp != InputField);
    }

    public String getActionCommand() {
        return ActionCommand;
    }

    public void setActionCommand(String actionCommand) {
        ActionCommand = actionCommand;
    }

    private void setCompletionUiDataListner(CompletionUiListner d, final Vector data) {
        if (d == null) {

            d = new CompletionUiListner() {

                private Vector DataVector = data == null ? new Vector() : data;

                @Override
                public int getVisibleColumns() {
                    return 1;
                }

                @Override
                public Object getValueAt(int row, int col, boolean inAll) {

                    return DataVector.elementAt(row).toString().trim();
                }

                @Override
                public String[] getColumnName() {
                    String columns[] = {"Particulars"};
                    return columns;
                }

                @Override
                public Class getColumnClass(int col) {
                    return String.class;
                }

                @Override
                public Vector getDataVector(boolean inAll) {
                    return DataVector;
                }

                @Override
                public void setDataVector(Vector v) {
                    DataVector = v;
                }

                @Override
                public Object getSelectedObject(String s, boolean inAll) {
                    return s;
                }

                @Override
                public void setAttributes(JTable t) {
                    RowSorter sorter = t.getRowSorter();
                    sorter.toggleSortOrder(0);
                }

                @Override
                public String getParentName() {
                    return "Default Model";
                }

                @Override
                public void addColumnSettings(JTable t, boolean addAll) {
                    JScrollPane pane = (JScrollPane) t.getParent().getParent();
                    t.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                    pane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
                }

                @Override
                public void updateDataVector(Vector data, JPanel completionUi, boolean inAll) {
                }

                @Override
                public void performAddAction() {
                }

                @Override
                public boolean canAddAction() {
                    return false;
                }
            };
        }
        this.dataListner = d;
    }

    private class ColumnHeaderAdapter implements MouseMotionListener {

        @Override
        public void mouseDragged(MouseEvent e) {
            setColumnWidthInBundle();
            setColumnNamesInBundle();
        }

        @Override
        public void mouseMoved(MouseEvent e) {
        }

        private void setColumnWidthInBundle() {
            if (!dataListner.getParentName().equals("Default Model")) {
                String value = null;
                Properties myProp = loadProperties(loadFile());
                for (int i = 0; i < choser.table.getColumnModel().getColumnCount(); i++) {
                    if (i == 0) {
                        value = "" + choser.table.getColumnModel().getColumn(i).getWidth();
                    } else {
                        value = value + "," + choser.table.getColumnModel().getColumn(i).getWidth();
                    }
                }
                saveProperties(loadFile(), myProp, dataListner.getParentName() + "_WIDTH", value);
            }
        }

        private void setColumnNamesInBundle() {
            String value = null;
            Properties myProp = loadProperties(loadFile());
            for (int i = 0; i < choser.table.getColumnModel().getColumnCount(); i++) {
                if (i == 0) {
                    value = "" + choser.table.getColumnModel().getColumn(i).getHeaderValue().toString();
                } else {
                    value = value + "," + choser.table.getColumnModel().getColumn(i).getHeaderValue().toString();
                }
            }
            saveProperties(loadFile(), myProp, dataListner.getParentName() + "_COL_NAMES", value);
        }

        public void getColumnWidthFromBundle(String key) {
            try {
                Properties tabProp = loadProperties(loadFile());
                String[] ColWidth = null;
                key = key + "_WIDTH";

                if (tabProp.getProperty(key) != null) {
                    ColWidth = tabProp.getProperty(key).split(",");
                    for (int i = 0; i < ColWidth.length; i++) {
                        if (choser.table.getColumnModel().getColumn(i) != null) {
                            choser.table.getColumnModel().getColumn(i).setPreferredWidth(Integer.parseInt(ColWidth[i]));
                        }
                    }
                    choser.table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                }
                if (key.equals("Default Model")) {
                    choser.table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
                }
                choser.pane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);

            } catch (ArrayIndexOutOfBoundsException ex) {
                ex.printStackTrace();
            }
        }

        public void getColumnNamesFromBundle(String key) {
            try {
                Properties tabProp = loadProperties(loadFile());
                String[] ColNames = null;
                key = key + "_COL_NAMES";
                if (tabProp.getProperty(key) != null) {
                    ColNames = tabProp.getProperty(key).split(",");
                    for (int i = 0; i < ColNames.length; i++) {
                        if (ColNames[i] != null && !ColNames[i].isEmpty()) {
                            for (int j = 0; j < choser.table.getColumnModel().getColumnCount(); j++) {
                                TableColumn col = choser.table.getColumnModel().getColumn(j);
                                if (i <= j && col != null && ColNames[i].equals(col.getHeaderValue().toString())) {
                                    choser.table.getColumnModel().moveColumn(j, i);
                                }
                            }
                        }

                    }
                }
            } catch (ArrayIndexOutOfBoundsException ex) {
                ex.printStackTrace();
            }
        }

        public Properties getProperties(String key) {
            try {
                Properties tabProp = loadProperties(loadFile());
                if (tabProp.getProperty(key + "_COL_NAMES") != null && tabProp.getProperty(key + "_WIDTH") != null) {
                    return tabProp;
                } else {
                    return null;
                }
            } catch (ArrayIndexOutOfBoundsException ex) {
                ex.printStackTrace();
                return null;
            }
        }

        private File loadFile() {
            File dir = new File(System.getProperty("netbeans.user") + System.getProperty("file.separator") + "CompletionUiSetting");
            if (!dir.exists()) {
                dir.mkdir();
            }
            File file = new File(dir.getAbsoluteFile() + "\\CompletionUiBundle.properties");
            return file;
        }

        private Properties loadProperties(File file) {

            java.io.InputStream propsFile;
            Properties tempProp = new Properties();

            try {
                if (file.exists()) {
                    propsFile = new FileInputStream(file);
                    tempProp.load(propsFile);
                    propsFile.close();
                }
            } catch (IOException ioe) {
                System.out.println("I/O Exception.");
                ioe.printStackTrace();

            }

            return tempProp;

        }

        private void saveProperties(File file, Properties p, String key, String value) {

            java.io.OutputStream propsFile;
            try {
                propsFile = new FileOutputStream(file);
                p.setProperty(key, value);
                p.save(propsFile, "");
                propsFile.close();
            } catch (IOException ioe) {
                System.out.println("I/O Exception.");
                ioe.printStackTrace();
                System.exit(0);
            }

        }
    }

    public void btnStateChanged(javax.swing.event.ChangeEvent e) {

        JButton btn = (JButton) e.getSource();
        if (btn.isEnabled()) {
            if (btn.getModel().isRollover()) {
                if (btn.getIcon() != null) {
                    btn.setContentAreaFilled(true);
                }
            } else {
                if (btn.getIcon() != null) {
                    btn.setContentAreaFilled(false);
                    btn.setBorderPainted(false);
                }
            }

        }
    }

    public void setMandatory(boolean mand) {
        this.mandatory = mand;
        Utility.fieldFocusGained(InputField, mandatory);
    }

    public void setAddType(int typ) {
        this.addType = typ;
        addButton.setVisible(addType > 0);

    }
}
