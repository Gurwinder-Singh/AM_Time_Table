/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DateControl.java
 *
 * Created on Dec 16, 2011, 8:30:25 PM
 */
package com.gdev.common.other;

//import com.as.common.FinancialYears;
//import com.as.common.utils.DateUtility;
//import com.as.conn.TimeSynch;
//import com.as.interfaces.UiFiles.DateChooser;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import com.gdev.common.util.DateChooser;
import org.openide.util.Exceptions;

/**
 *
 * @author gaurav
 */
public class DateControl extends javax.swing.JPanel {

    public static Frame defaultParent = null;
    SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd/MM/yyyy");
    Calendar cal = java.util.Calendar.getInstance();
    DateChooser choser = null;
    private Date reportAllowedDate;
    private boolean verifyDateRange = true;

    public DateControl(Frame parent, Date defaultDate) {
        try {
            choser = new DateChooser(parent, "Select Date");
            uiInit(defaultDate);
//             calendarButton.setIcon(IconFactoryClass.setIconForButton(IconFactoryClass.getCalendarIcon(),23,17)); // NOI18N


        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }

    public DateControl(Frame parent) {
        this(parent, new Date());
//     calendarButton.setIcon(IconFactoryClass.setIconForButton(IconFactoryClass.getCalendarIcon(),23,17)); // NOI18N
        setBtnIcon();
    }

    private void setBtnIcon() {
//         calendarButton.setIcon(new ImageIcon(new ImageIcon(getClass()
//			.getResource("com/as/client/asui/icons/Calendar.png")).getImage().getScaledInstance(23,17, Image.SCALE_SMOOTH))); // NOI18N
    }

    public DateControl() {
        this(defaultParent);
//             calendarButton.setIcon(IconFactoryClass.setIconForButton(IconFactoryClass.getCalendarIcon(),23,17)); // NOI18N

    }

    public DateControl(JDialog parent) {
        this(parent, new Date());
//             calendarButton.setIcon(IconFactoryClass.setIconForButton(IconFactoryClass.getCalendarIcon(),23,17)); // NOI18N

    }

    public DateControl(JDialog parent, Date dt) {
        try {
            choser = new DateChooser(parent, "Select Date");
            uiInit(dt);
//                 calendarButton.setIcon(IconFactoryClass.setIconForButton(IconFactoryClass.getCalendarIcon(),23,17)); // NOI18N

        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }

    public void setDateVerification(boolean verify){
        this.verifyDateRange = verify;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        datelabel = new javax.swing.JTextField();
        InputField = new javax.swing.JFormattedTextField();
        calendarButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setMinimumSize(new java.awt.Dimension(16, 20));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(128, 23));
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                formFocusLost(evt);
            }
        });

        datelabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        datelabel.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        datelabel.setBorder(null);
        datelabel.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        datelabel.setEnabled(false);
        datelabel.setMinimumSize(new java.awt.Dimension(28, 14));

        InputField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        try {
            InputField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        InputField.setMargin(new java.awt.Insets(1, 3, 1, 1));
        InputField.setMinimumSize(new java.awt.Dimension(110, 14));
        InputField.setPreferredSize(new java.awt.Dimension(30, 16));
        InputField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                InputFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                InputFieldFocusLost(evt);
            }
        });

        calendarButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        calendarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mac/common/icons/calendar_day.png"))); // NOI18N
        calendarButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        calendarButton.setBorderPainted(false);
        calendarButton.setContentAreaFilled(false);
        calendarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        calendarButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        calendarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calendarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(InputField, javax.swing.GroupLayout.PREFERRED_SIZE, 72, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(datelabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(calendarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calendarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(InputField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(datelabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {calendarButton, datelabel});

    }// </editor-fold>//GEN-END:initComponents

    private void calendarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calendarButtonActionPerformed
        // TODO add your handling code here:

        Point p = InputField.getLocationOnScreen();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int frameHeight = dim.height;
        int frameWidth = dim.width;
        int controlHeight = 250;
        int controlWidth = 210;
        if (frameHeight - p.y > controlHeight) {
            p.y += InputField.getSize().height + 7;
        } else {
            p.y = frameHeight - controlHeight;
        }
        if (frameWidth - p.x > controlWidth) {
            p.x -= 20;
        } else {
            p.x = frameWidth - controlWidth;
        }
        if (p.y < 0) {
            p.y = 0;
        }
        if (p.x < 0) {
            p.x = 0;
        }


        Date dt = choser.select(p, getDate());
        if (dt == null) {
            return;
        } else {
            setDate(dt);
        }


    }//GEN-LAST:event_calendarButtonActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        // TODO add your handling code here:
        InputField.requestFocus();

    }//GEN-LAST:event_formFocusGained

    private void formFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_formFocusLost

    private void InputFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_InputFieldFocusGained
        // TODO add your handling code here:
        Utility.fieldFocusGained(InputField, true);
    }//GEN-LAST:event_InputFieldFocusGained

    private void InputFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_InputFieldFocusLost
        // TODO add your handling code here:
        Utility.fieldFocusLost(InputField, true);
        try {
//            setDate(getDate());
            datelabel.setText(getDate().toString().substring(0, 3));
        } catch (Exception ex) {
            InputField.requestFocus();
        }

        InputField.setToolTipText(cal.getTime().toString());

    }//GEN-LAST:event_InputFieldFocusLost
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JFormattedTextField InputField;
    public javax.swing.JButton calendarButton;
    private javax.swing.JTextField datelabel;
    // End of variables declaration//GEN-END:variables

    private void uiInit(Date defaultDate) throws Exception {

        initComponents();

        InputField.setValue(sdf.format(defaultDate));
        InputField.setInputVerifier(new DateVerifier());

        KeyStroke k1 = KeyStroke.getKeyStroke(KeyEvent.VK_D,
                InputEvent.CTRL_MASK);

        ActionListener focusListener = new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InputField.requestFocus();
            }
        };
        InputField.addActionListener(focusListener);
        InputField.registerKeyboardAction(focusListener, k1, WHEN_IN_FOCUSED_WINDOW);

        KeyStroke k2 = KeyStroke.getKeyStroke(KeyEvent.VK_Q,
                InputEvent.CTRL_MASK);
        ActionListener openListener = new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calendarButtonActionPerformed(evt);
            }
        };
        calendarButton.registerKeyboardAction(openListener, k2, WHEN_IN_FOCUSED_WINDOW);

        KeyStroke kup = KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0);
        KeyStroke kdown = KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0);



        Action keyUpAction = new AbstractAction() {

            public void actionPerformed(ActionEvent e) {
                if (InputField.isEnabled() && InputField.isEditable()) {
                    Date dt = getDate();

                    if (dt != null) {

                        GregorianCalendar cal = new GregorianCalendar(
                                dt.getYear() + 1900, dt.getMonth(), dt.getDate());
                        int caretPos = InputField.getCaretPosition();
                        if (caretPos < 2) {
                            cal.add(Calendar.DATE, 1);
                        } else if (caretPos < 6) {
                            cal.add(Calendar.MONTH, 1);
                        } else {
                            cal.add(Calendar.YEAR, 1);
                        }
                        setDate(cal.getTime());
                        InputField.setCaretPosition(caretPos);
                    }
                }
            }
        };

        Action keyDownAction = new AbstractAction() {

            public void actionPerformed(ActionEvent e) {
                if (InputField.isEnabled() && InputField.isEditable()) {
                    Date dt = getDate();
                    if (dt != null) {
                        GregorianCalendar cal = new GregorianCalendar(
                                dt.getYear() + 1900, dt.getMonth(), dt.getDate());
                        int caretPos = InputField.getCaretPosition();
                        if (caretPos < 2) {
                            cal.add(Calendar.DATE, -1);
                        } else if (caretPos < 6) {
                            cal.add(Calendar.MONTH, -1);
                        } else {
                            cal.add(Calendar.YEAR, -1);
                        }
                        setDate(cal.getTime());
                        InputField.setCaretPosition(caretPos);
                    }
                }
            }
        };
        
        
        InputField.getInputMap().put(kup, "dateUpAction");
        InputField.getActionMap().put("dateUpAction", keyUpAction);

        InputField.getInputMap().put(kdown, "dateDownAction");
        InputField.getActionMap().put("dateDownAction", keyDownAction);

        setDate(getDate());
//         System.out.print("H   : "+this.getSize().getHeight());
//		System.out.println("W   : "+this.getSize().getWidth());

    }

    private class DateVerifier extends InputVerifier {

        public DateVerifier() {
            sdf.setLenient(false);
        }

        public boolean verify(JComponent input) {
            JFormattedTextField ftf = (JFormattedTextField) input;
            // allow null entry which will include slashes because of the
            // mask
            if (ftf.getText().equals("  /  /    ")) {
                return true;
            }
            try {
                cal.setTime(sdf.parse(ftf.getText()));
                setDate(cal.getTime());
            } catch (Exception pe) {
                JOptionPane.showMessageDialog(choser.getParent(), "Enter a valid date.", "Error", JOptionPane.ERROR_MESSAGE);
                setDate(new Date());
                InputField.requestFocus();
                return false;
            }
            return true;
        }
    }

    public void selectAll() {
        InputField.selectAll();
    }

    public void requestFocus() {
        InputField.requestFocus();
    }

    public void setDateNotFocus(Date date) {
        if (date != null) {
          setFinalDateValue(date, false);
        }
        checkDateInRange();
    }

    public void setDate(Date date) {
        if (date != null) {
//            if (!ClientController.getDefault().isUserAdmin() 
//                    && reportAllowedDate !=null && date.before(reportAllowedDate)){
//                date = reportAllowedDate;
//            }
            setFinalDateValue(date,true);
        } 
        checkDateInRange();
    }

    private void setFinalDateValue(Date dt, boolean reqFocus){
        InputField.setValue(sdf.format(dt));
            datelabel.setText(dt.toString().substring(0, 3));
//            InputField.setToolTipText(date.toString());
//            InputField.setToolTipText(DateUtility.getDefault().getDateInformation(dt, true));
            if(reqFocus){
            InputField.requestFocus();
            }
    }
    
     public boolean checkDateInRange(){
//         if(verifyDateRange){
//            if(!ClientController.getDefault().isUserAdmin() 
//                    && ClientController.getDefault().getUserSettings().isWithin_fy()){
//                
//                if(com.as.common.utils.Utility.getUserFinancialYear().getFromDate().compareTo(getDate())==1){
//                com.as.common.utils.Utility.makeErrorSound();
//                   setFinalDateValue(com.as.common.utils.Utility.getUserFinancialYear().getFromDate(),true);
//                  return false;     
//               
//                }else if(com.as.common.utils.Utility.getUserFinancialYear().getToDate().compareTo(getDate())==-1){
//                   com.as.common.utils.Utility.makeErrorSound();
//                   setFinalDateValue(com.as.common.utils.Utility.getUserFinancialYear().getToDate(),true);
//                    return false;
//                }
//            }else{
//                if(ClientController.getDefault().getStartDateOfCompany()!=null 
//                        && ClientController.getDefault().getStartDateOfCompany().compareTo(getDate())==1){
//                     com.as.common.utils.Utility.makeErrorSound();
//                   setFinalDateValue(ClientController.getDefault().getStartDateOfCompany(),true);
//                  return false;     
//               
//                }
//            
//            }
//         }
         return true;
        }
     
    public void setDate(java.sql.Date date) {
        if (date != null) {
            this.setDate(new Date(date.getTime()));
        }
    }

    public void setEditable(boolean b) {
        InputField.setEditable(b);
        this.calendarButton.setEnabled(b);
    }

    public Date getDate() {
        try {
            return sdf.parse(InputField.getText());
        } catch (ParseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            InputField.requestFocus();
            return new Date();
        }
    }

    public Date getDateWithTime() {
        Date now = new Date();
        Date dt = getDate();
        dt.setHours(now.getHours());
        dt.setMinutes(now.getMinutes());
        dt.setSeconds(now.getSeconds());
        return dt;
    }

    public Timestamp getCurrentTimeStamp() {
        Date now = new Date();
        return getTimeStamp(now, now.getHours(), now.getMinutes(), now.getSeconds());
    }

    public Timestamp getTimeStamp() {
        Date date = getDate();
        Date now = new Date();
        return getTimeStamp(date, now.getHours(), now.getMinutes(), now.getSeconds());
    }

    public Timestamp getTimeStamp(String time) {
        Date date = getDate();
        String[] arr = time.split(":");
        int hrs = getIntValue(arr[0]);
        int mns = getIntValue(arr[1]);
        int sec = getIntValue(arr[2]);
        return getTimeStamp(date, hrs, mns, sec);
    }

    private int getIntValue(String arr) {
        if (arr != null) {
            try {
                return Integer.parseInt(arr);
            } catch (Exception ex) {
                return 0;
            }
        }
        return 0;
    }

    public Timestamp getTimeStamp(int hrs, int min, int sec) {
        Date dt = getDate();
        return getTimeStamp(dt, hrs, min, sec);
    }

    public Timestamp getTimeStamp(Date dt, int hrs, int min, int sec) {
        dt.setHours(hrs);
        dt.setMinutes(min);
        dt.setSeconds(sec);
        return new Timestamp(dt.getTime());
    }

    /*
     * This method returns util date after a particular interval from the date
     * provided val is the period of interval (provide -ve values for previous
     * periods) typ is the interval type ( provide D=days,W=week, M=month,
     * Y=year, H=hours )
     */
    public java.util.Date getDateAfter(java.util.Date date, int val, String typ) {

        return Utility.getDateAfter(date, val, typ);
    }

    public java.util.Date getNextDate(java.util.Date date) {
        return getDateAfter(date, 1, "D");

    }

    public java.util.Date getPreviousDate(java.util.Date date) {
        return getDateAfter(date, -1, "D");
    }

    public java.util.Date getAllowedReportDate() {
//        java.sql.Date serverDate = TimeSynch.getDefault().getServerDate();
//        int backDays = ClientController.getDefault().getUserSettings().getBackDaysReport();
//        java.util.Date creditDate = getDateAfter(serverDate, -backDays, "D");
//        return creditDate;
        return new Date();
    }

    public void setCreditLimit(boolean limit) {
//        if (!ClientController.getDefault().isUserAdmin() && limit) {
//            setLimitedDate(getAllowedReportDate());
////            setEditable(false);
////            setEnabled(false);
//        }
    }

    private void setLimitedDate(Date d) {
        this.reportAllowedDate = d;
    }
}